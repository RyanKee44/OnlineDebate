@page "/reports/create"
@using Microsoft.EntityFrameworkCore
@using OnlineDebate.Data
@using OnlineDebate.Domain
@inject IDbContextFactory<OnlineDebate.Data.OnlineDebateContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Report</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Report" OnValidSubmit="AddReport" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="reportreason" class="form-label">ReportReason:</label> 
                <InputText id="reportreason" @bind-Value="Report.ReportReason" class="form-control" /> 
                <ValidationMessage For="() => Report.ReportReason" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="reporttype" class="form-label">ReportType:</label> 
                <InputText id="reporttype" @bind-Value="Report.ReportType" class="form-control" /> 
                <ValidationMessage For="() => Report.ReportType" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="userid" class="form-label">UserId:</label> 
                <InputNumber id="userid" @bind-Value="Report.UserId" class="form-control" /> 
                <ValidationMessage For="() => Report.UserId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="argumentid" class="form-label">ArgumentId:</label> 
                <InputSelect id="argumentid" @bind-Value="Report.ArgumentId" class="form-control">
                    <option value="">-- Select Argument --</option>
                    @if (Arguments != null)
                    {
                        foreach (var arguement in Arguments)
                        {
                            <option value="@arguement.Id">@arguement.ArgumentContent</option>
                        }
                    }
                </InputSelect>
            </div>        
            <div class="mb-3">
                <label for="commentid" class="form-label">CommentId:</label> 
                <InputSelect id="commentid" @bind-Value="Report.CommentId" class="form-control">
                    <option value="">-- Select Comment --</option>
                    @if (Arguments != null)
                    {
                        foreach (var comment in Comments)
                        {
                            <option value="@comment.Id">@comment.CommentContent</option>
                        }
                    }
                </InputSelect>
            </div>        
            <div class="mb-3" hidden>
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Report.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Report.DateCreated" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/reports">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Report Report { get; set; } = new();

    private OnlineDebateContext context = default!;
    private IList<Argument> Arguments;
    private IList<Comment> Comments;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        Arguments = context.Argument.ToList();
        Comments = context.Comment.ToList();
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddReport()
    {
        using var context = DbFactory.CreateDbContext();
        Report.DateCreated = DateTime.Now;
        context.Report.Add(Report);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/reports");
    }
}
