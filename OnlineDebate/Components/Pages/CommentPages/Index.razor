@page "/comments"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using OnlineDebate.Domain
@using OnlineDebate.Data
@implements IAsyncDisposable
@inject IDbContextFactory<OnlineDebate.Data.OnlineDebateContext> DbFactory
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Index</PageTitle>

<style>
    body {
    background-color: lightyellow;
    }

    .blue-outline {
    border: 3px solid blue;
    box-shadow: 0 0 10px blue;
    background-color: rgba(0, 0, 255, 0.1);
    transition: all 0.3s ease;
    }

    .kebab-menu {
    position: relative;
    display: inline-block;
    }

    .kebab-btn {
    font-size: 24px;
    background: none;
    border: none;
    color: #333;
    cursor: pointer;
    }

    .kebab-dropdown {
    display: none;
    position: absolute;
    top: 25px;
    right: 0;
    background-color: white;
    min-width: 160px;
    box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
    z-index: 1;
    border-radius: 4px;
    }

    .kebab-dropdown a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
    }

    .kebab-dropdown a:hover {
    background-color: #ddd;
    }

    .kebab-dropdown.show {
    display: block;
    }
</style>

<h1 style="font-family:Jacquard">Comments</h1>

<input type="text" class="search-box" placeholder="Search Comments..." @bind="searchTerm" @oninput="FilterComments" />

<QuickGrid Class="table" Items="filteredComments.AsQueryable()">
    <PropertyColumn Property="comment => comment.CommentContent" Title = "Comment" />
    <PropertyColumn Property="comment => comment.CommentStance" Title="Agree/Disagree" />
    <PropertyColumn Property="comment => comment.CommentLike" Title="Likes" />
    <PropertyColumn Property="comment => comment.OnlineDebateUser.FirstName" Title="User" />
    <PropertyColumn Property="comment => comment.Argument.ArgumentContent" Title="Arguement" />
    <PropertyColumn Property="comment => comment.DateCreated" Title="Date" />

    <TemplateColumn Context="comment">
        <a href="@($"comments/details?id={comment.Id}")">Details</a> |

        @if (comment.OnlineDebateUser.FirstName == currentUserId || IsAdmin)
        {
            <div class="kebab-menu">
                <button class="kebab-btn" @onclick="() => ToggleMenu(comment.Id)">
                    &#x22EE; <!-- Vertical Ellipsis (three dots) -->
                </button>

                <div class="kebab-dropdown @(activeMenu == comment.Id ? "show" : "")">
                    <a href="@($"comments/edit?id={comment.Id}")">Edit</a>
                    <a href="@($"comments/delete?id={comment.Id}")">Delete</a>

                </div>
            </div>

        }
        <a href="@($"reports?commentId={comment.Id}")" style="background-color: orange; color: white; padding: 5px 10px; border-radius: 5px; text-decoration: none;">Report</a>

        <button @onclick="() => ChangeLike(comment, 1)"
        class="@GetButtonClass(comment.Id, 1)"
        style="background-color: green; color: white;">
            Like
        </button>

        <button @onclick="() => ChangeLike(comment, -1)"
        class="@GetButtonClass(comment.Id, -1)"
        style="background-color: red; color: white;">
            Dislike
        </button>

    </TemplateColumn>
</QuickGrid>

<NavLink class="nav-link" href="comments/create">
    <button style="background-color:mediumseagreen; color:white; border-radius:200px; width:150px">Create New</button>
</NavLink>

@code {
    private OnlineDebateContext context = default!;
    private List<Comment> comments = new List<Comment>();
    private List<Comment> filteredComments = new List<Comment>();

    private string currentUserId = string.Empty;
    private bool IsAdmin = false;
    private int? activeMenu = null;
    private string searchTerm = string.Empty;

    [SupplyParameterFromQuery]
    public int? argumentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        currentUserId = user.Identity.Name?.Split('@')[0] ?? "User";
        IsAdmin = user?.IsInRole("Administrator") ?? false;
        context = DbFactory.CreateDbContext();

        var query = context.Comment
            .Include(c => c.Argument)
            .Include(c => c.OnlineDebateUser)
            .AsQueryable();

        if (argumentId.HasValue)
        {
            query = query.Where(c => c.ArgumentId == argumentId.Value);
        }

        comments = query.ToList();
        filteredComments = comments;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Subscribe to changes of the SearchTerm
            this.searchTerm = "";
        }
        FilterComments();
        base.OnAfterRender(firstRender);
    }

    private void FilterComments()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredComments = comments;
        }
        else
        {
            filteredComments = comments.Where(c => c.CommentContent.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        StateHasChanged();
    }

    private void ToggleMenu(int commentId)
    {
        // Toggle the visibility of the menu
        activeMenu = activeMenu == commentId ? null : commentId;
    }

    private Dictionary<int, int> userVotes = new();

    private string GetButtonClass(int commentId, int voteType)
    {
        if (userVotes.ContainsKey(commentId) && userVotes[commentId] == voteType)
        {
            return "blue-outline";  // Apply blue outline when the button is pressed
        }
        return string.Empty;  // No outline if button is not pressed
    }

    private async Task ChangeLike(Comment comment, int change)
    {
        int commentId = comment.Id;

        if (userVotes.TryGetValue(commentId, out int previousVote))
        {
            if (previousVote == change)
            {
                comment.CommentLike -= change;
                userVotes.Remove(commentId);
            }
            else
            {
                comment.CommentLike -= previousVote;
                comment.CommentLike += change;

                userVotes[commentId] = change;
            }
        }
        else
        {
            comment.CommentLike += change;
            userVotes[commentId] = change;
        }

        context.Comment.Update(comment);
        await context.SaveChangesAsync();

        // Update the UI with the new like count
        var updatedComment = comments.First(a => a.Id == comment.Id);
        updatedComment.CommentLike = comment.CommentLike;

        StateHasChanged();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
