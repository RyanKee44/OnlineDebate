@page "/comments/delete"
@using Microsoft.EntityFrameworkCore
@using OnlineDebate.Domain
@inject IDbContextFactory<OnlineDebate.Data.OnlineDebateContext> DbFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Delete</PageTitle>

<style>
    body {
        background-color: lightyellow;
    }
</style>

<h1 style="font-family:Jacquard">Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Comment</h2>
    <hr />
    @if (comment is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">CommentContent</dt>
            <dd class="col-sm-10">@comment.CommentContent</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CommentStance</dt>
            <dd class="col-sm-10">@comment.CommentStance</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CommentLike</dt>
            <dd class="col-sm-10">@comment.CommentLike</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@comment.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ArgumentId</dt>
            <dd class="col-sm-10">@comment.ArgumentId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@comment.DateCreated</dd>
        </dl>
        <EditForm method="post" Model="comment" OnValidSubmit="DeleteComment" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(comment is null)">Delete</button> |
            <a href="/comments">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Comment? comment;
    private string currentUserId = string.Empty;
    private bool IsAdmin = false;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUserId = user.Identity.Name?.Split('@')[0] ?? "User";
        IsAdmin = user?.IsInRole("Administrator") ?? false;

        using var context = DbFactory.CreateDbContext();
        comment = await context.Comment.FirstOrDefaultAsync(m => m.Id == Id);

        var query = context.Comment
         .Include(a => a.OnlineDebateUser)
         .ToList();

        if (comment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }


        if (comment.OnlineDebateUser is null || comment.OnlineDebateUser.FirstName != currentUserId && !IsAdmin)
        {
            NavigationManager.NavigateTo("/comments");
        }


    }

    private async Task DeleteComment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Comment.Remove(comment!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/comments");
    }
}
