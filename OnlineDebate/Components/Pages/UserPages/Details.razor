@page "/users/details"
@using Microsoft.EntityFrameworkCore
@using OnlineDebate.Domain
@inject IDbContextFactory<OnlineDebate.Data.OnlineDebateContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>User</h2>
    <hr />
    @if (user is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">UserName</dt>
            <dd class="col-sm-10">@user.UserName</dd>
            <dt class="col-sm-2">UserGender</dt>
            <dd class="col-sm-10">@user.UserGender</dd>
            <dt class="col-sm-2">UserAge</dt>
            <dd class="col-sm-10">@user.UserAge</dd>
            <dt class="col-sm-2">UserEmail</dt>
            <dd class="col-sm-10">@user.UserEmail</dd>
            <dt class="col-sm-2">UserBio</dt>
            <dd class="col-sm-10">@user.UserBio</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@user.DateCreated</dd>
        </dl>
        <div>
            <a href="@($"/users/edit?id={user.Id}")">Edit</a> |
            <a href="@($"/users")">Back to List</a>
        </div>
    }
</div>

@code {
    private User? user;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        user = await context.User.FirstOrDefaultAsync(m => m.Id == Id);

        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
