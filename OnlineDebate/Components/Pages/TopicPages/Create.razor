@page "/topics/create"
@using Microsoft.EntityFrameworkCore
@using OnlineDebate.Data
@using OnlineDebate.Domain
@inject IDbContextFactory<OnlineDebate.Data.OnlineDebateContext> DbFactory
@inject NavigationManager NavigationManager

@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Create</PageTitle>

<style>
    body {
        background-color: lightyellow;
    }
</style>

<h1 style="font-family:Jacquard">Create</h1>

<h2>Topic</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Topic" OnValidSubmit="AddTopic" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="topicname" class="form-label">Topic:</label>
                <InputText id="topicname" @bind-Value="Topic.TopicName" class="form-control" />
                <ValidationMessage For="() => Topic.TopicName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="topiccategory" class="form-label">Category:</label> 
                <InputSelect id="topiccategory" @bind-Value="Topic.TopicCategory" class="form-control">
                    <option value="">-Select a Topic-</option>
                    @foreach (var topic in preBuiltTopics)
                    {
                        <option value="@topic">@topic</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Topic.TopicCategory" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="topicdescription" class="form-label">Description:</label> 
                <InputText id="topicdescription" @bind-Value="Topic.TopicDescription" class="form-control" /> 
                <ValidationMessage For="() => Topic.TopicDescription" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="topicrules" class="form-label">Rules:</label> 
                <InputText id="topicrules" @bind-Value="Topic.TopicRules" class="form-control" /> 
                <ValidationMessage For="() => Topic.TopicRules" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="userid" class="form-label">UserId:</label> 
                <InputNumber id="userid" @bind-Value="Topic.UserId" class="form-control" /> 
                <ValidationMessage For="() => Topic.UserId" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Topic.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Topic.DateCreated" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/topics">Back to List</a>
</div>

@code {

    private List<string> preBuiltTopics = new List<string>
    {
        "Discussion",
        "Math",
        "History",
        "Literature",
        "Fun",
        "Politics"

    };

    [SupplyParameterFromForm]
    private Topic Topic { get; set; } = new();

    //Create userId string to store the user id, default value is "System".
    private string userId = "System";
    //Inject the AuthenticationStateProvider to get the user id.
    @inject AuthenticationStateProvider authenticationStateProvider
    //Override the OnInitialized method to get the user id.
    protected override async void OnInitialized()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Get the userId claim
        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }

    }




    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddTopic()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Set the OnlineDebateUserId to the current user's username or another identifier
            Topic.OnlineDebateUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }

        using var context = DbFactory.CreateDbContext();

        //Set the userId to the CreatedBy and UpdatedBy fields.
        
        Topic.DateCreated = DateTime.Now;

        context.Topic.Add(Topic);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/topics");
    }
}
