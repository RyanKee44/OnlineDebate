@page "/arguments"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using OnlineDebate.Domain
@using OnlineDebate.Data
@using Microsoft.AspNetCore.Authorization
@inject IDbContextFactory<OnlineDebate.Data.OnlineDebateContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator, User")]
@rendermode InteractiveServer

<PageTitle>Arguments</PageTitle>

<h1 style="font-family:Jacquard">Arguments</h1>

<style>
    body {
        background-color: lightyellow;
    }
</style>

<QuickGrid Class="table" Items="arguments.AsQueryable()">
    <PropertyColumn Property="argument => argument.ArgumentContent" Title="Argument" />
    <PropertyColumn Property="argument => argument.ArgumentStance" Title="Agree/Disagree" />
    <PropertyColumn Property="argument => argument.ArgumentLike" Title="Likes" />
    <PropertyColumn Property="argument => argument.OnlineDebateUser.FirstName" Title="User" />
    <PropertyColumn Property="argument => argument.Topic.TopicName" Title="Topic" />
    <PropertyColumn Property="argument => argument.DateCreated" Title="Date Added" />

    <TemplateColumn Context="argument">
        <a href="@($"arguments/edit?id={argument.Id}")">Edit</a> |
        <a href="@($"arguments/details?id={argument.Id}")">Details</a> |
        <AuthorizeView Roles="Administrator">
            <a href="@($"arguments/delete?id={argument.Id}")">Delete</a>
        </AuthorizeView>

        <a href="@($"comments?argumentId={argument.Id}")">View Comments</a>
        <button @onclick="() => ChangeLike(argument, 1)" style="background-color: green; color: white;">Like</button>
        <button @onclick="() => ChangeLike(argument, -1)" style="background-color: red; color: white;">Dislike</button>
    </TemplateColumn>
</QuickGrid>

<NavLink class="nav-link" href="arguments/create">
    <button style="background-color:mediumseagreen; color:white; border-radius:200px; width:150px">Create New</button>
</NavLink>

@code {
    private OnlineDebateContext context = default!;
    private List<Argument> arguments = new List<Argument>();

    [SupplyParameterFromQuery]
    public int? TopicId { get; set; }  // TopicId from query parameter

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        var query = context.Argument
            .Include(a => a.Topic)
            .Include(a => a.OnlineDebateUser)
            .AsQueryable();

        if (TopicId.HasValue)  // Filter arguments based on TopicId
        {
            query = query.Where(a => a.Topic.Id == TopicId.Value);
        }

        arguments = query.ToList();
    }

    private async Task ChangeLike(Argument argument, int change)
    {
        argument.ArgumentLike += change;

        context.Argument.Update(argument);
        await context.SaveChangesAsync();

        var updatedArgument = arguments.First(a => a.Id == argument.Id);
        updatedArgument.ArgumentLike = argument.ArgumentLike;

        StateHasChanged();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
