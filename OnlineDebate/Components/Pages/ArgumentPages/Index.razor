@page "/arguments"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using OnlineDebate.Domain
@using OnlineDebate.Data
@using Microsoft.AspNetCore.Authorization
@inject IDbContextFactory<OnlineDebate.Data.OnlineDebateContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator, User")]
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider



<PageTitle>Arguments</PageTitle>

<h1 style="font-family:Jacquard">Arguments</h1>

<input type="text" class="search-box" placeholder="Search Arguments..." @bind="searchTerm" @oninput="FilterArguments" />

<style>
    body {
        background-color: lightyellow;
    }

    .blue-outline {
        border: 3px solid blue;
        box-shadow: 0 0 10px blue;
        background-color: rgba(0, 0, 255, 0.1); 
        transition: all 0.3s ease;
    }

    .kebab-menu {
        position: relative;
        display: inline-block;
    }

    .kebab-btn {
        font-size: 24px;
        background: none;
        border: none;
        color: #333;
        cursor: pointer;
    }

    .kebab-dropdown {
        display: none;
        position: absolute;
        top: 25px;
        right: 0;
        background-color: white;
        min-width: 160px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
        z-index: 1;
        border-radius: 4px;
    }

        .kebab-dropdown a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }

            .kebab-dropdown a:hover {
                background-color: #ddd;
            }

        .kebab-dropdown.show {
            display: block;
        }
</style>

<QuickGrid Class="table" Items="filteredArguments.AsQueryable()">
    <PropertyColumn Property="argument => argument.ArgumentContent" Title="Argument" />
    <PropertyColumn Property="argument => argument.ArgumentStance" Title="Agree/Disagree" />
    <PropertyColumn Property="argument => argument.ArgumentLike" Title="Likes" />
    <PropertyColumn Property="argument => argument.OnlineDebateUser.FirstName" Title="User" />
    <PropertyColumn Property="argument => argument.Topic.TopicName" Title="Topic" />
    <PropertyColumn Property="argument => argument.DateCreated" Title="Date Added" />

    <TemplateColumn Context="argument">

        <a href="@($"arguments/details?id={argument.Id}")">Details</a> |
        <a href="@($"comments?argumentId={argument.Id}")">View Comments</a>

        @if (argument.OnlineDebateUser.FirstName == currentUserId || IsAdmin)
        {
            <div class="kebab-menu">
                <button class="kebab-btn" @onclick="() => ToggleMenu(argument.Id)">
                    &#x22EE;
                </button>

                <div class="kebab-dropdown @(activeMenu == argument.Id ? "show" : "")">
                    <a href="@($"arguments/edit?id={argument.Id}")">Edit</a>
                    <a href="@($"arguments/delete?id={argument.Id}")">Delete</a>

                </div>
            </div>
        }

        <button @onclick="() => ChangeLike(argument, 1)" 
                class="@GetButtonClass(argument.Id, 1)" 
                style="background-color: green; color: white;">
            Like
        </button>

        <button @onclick="() => ChangeLike(argument, -1)" 
                class="@GetButtonClass(argument.Id, -1)" 
                style="background-color: red; color: white;">
            Dislike
        </button>

    </TemplateColumn>
</QuickGrid>

<NavLink class="nav-link" href="arguments/create">
    <button style="background-color:mediumseagreen; color:white; border-radius:200px; width:150px">Create New</button>
</NavLink>

@code {
    private OnlineDebateContext context = default!;
    private List<Argument> arguments = new List<Argument>();

    private string currentUserId = string.Empty;
    private bool IsAdmin = false;
    private int? activeMenu = null;

    [SupplyParameterFromQuery]
    public int? TopicId { get; set; }  // TopicId from query parameter

    private string searchTerm = string.Empty;
    private List<Argument> filteredArguments = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        currentUserId = user.Identity.Name?.Split('@')[0] ?? "User";
        IsAdmin = user?.IsInRole("Administrator") ?? false;


        context = DbFactory.CreateDbContext();

        var query = context.Argument
            .Include(a => a.Topic)
            .Include(a => a.OnlineDebateUser)
            .AsQueryable();

        if (TopicId.HasValue)  // Filter arguments based on TopicId
        {
            query = query.Where(a => a.Topic.Id == TopicId.Value);
        }

        arguments = query.ToList();
        filteredArguments = arguments;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Subscribe to changes of the SearchTerm
            this.searchTerm = "";
        }
        FilterArguments();
        base.OnAfterRender(firstRender);
    }

    private void FilterArguments()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredArguments = arguments; // Show all arguments
        }
        else
        {
            filteredArguments = arguments.Where(a => a.ArgumentContent.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        StateHasChanged(); // This is the KEY missing line!
    }

    private void ToggleMenu(int argumentId)
    {
        // Toggle the visibility of the menu
        activeMenu = activeMenu == argumentId ? null : argumentId;
    }

    private Dictionary<int, int> userVotes = new(); 

    private string GetButtonClass(int argumentId, int voteType)
    {
        if (userVotes.ContainsKey(argumentId) && userVotes[argumentId] == voteType)
        {
            return "blue-outline";  // Apply blue outline when the button is pressed
        }
        return string.Empty;  // No outline if button is not pressed
    }

    private async Task ChangeLike(Argument argument, int change)
    {
        int argumentId = argument.Id;

        if (userVotes.TryGetValue(argumentId, out int previousVote))
        {
            if (previousVote == change)
            {
                argument.ArgumentLike -= change; 
                userVotes.Remove(argumentId); 
            }
            else
            {
                argument.ArgumentLike -= previousVote; 
                argument.ArgumentLike += change; 

                userVotes[argumentId] = change;
            }
        }
        else
        {
            argument.ArgumentLike += change;
            userVotes[argumentId] = change;
        }

        context.Argument.Update(argument);
        await context.SaveChangesAsync();

        // Update the UI with the new like count
        var updatedArgument = arguments.First(a => a.Id == argument.Id);
        updatedArgument.ArgumentLike = argument.ArgumentLike;

        StateHasChanged();
    }



    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
