@page "/arguments/create"
@using Microsoft.EntityFrameworkCore
@using OnlineDebate.Domain
@using OnlineDebate.Data
@inject IDbContextFactory<OnlineDebate.Data.OnlineDebateContext> DbFactory
@inject NavigationManager NavigationManager

@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Argument</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Argument" OnValidSubmit="AddArgument" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="argumentcontent" class="form-label">ArgumentContent:</label> 
                <InputText id="argumentcontent" @bind-Value="Argument.ArgumentContent" class="form-control" /> 
                <ValidationMessage For="() => Argument.ArgumentContent" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="argumentstance" class="form-label">ArgumentStance:</label>
                <InputSelect id="argumentstance" @bind-Value="Argument.ArgumentStance" class="form-control">
                    <option value="true">Agree</option>
                    <option value="false">Disagree</option>
                </InputSelect>
                <ValidationMessage For="() => Argument.ArgumentStance" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="argumentlike" class="form-label">ArgumentLike:</label> 
                <InputNumber id="argumentlike" @bind-Value="Argument.ArgumentLike" class="form-control" /> 
                <ValidationMessage For="() => Argument.ArgumentLike" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="onlinedebateuserid" class="form-label">onlinedebateuserid:</label>
                <InputText id="onlinedebateuserid" @bind-Value="Argument.OnlineDebateUserId" class="form-control" />
                <ValidationMessage For="() => Argument.OnlineDebateUserId" class="text-danger" />
            </div>        
            <div class="mb-3">
                <label for="topicid" class="form-label">TopicId:</label>
                <InputSelect id="topicid" @bind-Value="Argument.TopicId" class="form-control">
                    <option value="">-- Select Topic --</option>
                    @if (Topics != null)
                    {
                        foreach (var topic in Topics)
                        {
                            <option value="@topic.Id">@topic.TopicName</option>
                        }
                    }
                </InputSelect>
            </div>        
            <div class="mb-3" hidden>
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Argument.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Argument.DateCreated" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/arguments">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Argument Argument { get; set; } = new();

    private OnlineDebateContext context = default!;
    private IList<Topic> Topics;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        Topics = context.Topic.ToList();
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddArgument()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Set the OnlineDebateUserId to the current user's username or another identifier
            Argument.OnlineDebateUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }

        using var context = DbFactory.CreateDbContext();
        Argument.DateCreated = DateTime.Now;
        context.Argument.Add(Argument);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/arguments");
    }
}
