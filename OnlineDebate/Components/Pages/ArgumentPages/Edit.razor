@page "/arguments/edit"
@using Microsoft.EntityFrameworkCore
@using OnlineDebate.Domain
@inject IDbContextFactory<OnlineDebate.Data.OnlineDebateContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1 style="font-family:Jacquard">Edit</h1>

<style>
    body {
        background-color: lightyellow;
    }
</style>

<h2>Argument</h2>
<hr />
@if (Argument is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Argument" OnValidSubmit="UpdateArgument" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Argument.Id" value="@Argument.Id" />
                <div class="mb-3">
                    <label for="argumentcontent" class="form-label">ArgumentContent:</label>
                    <InputText id="argumentcontent" @bind-Value="Argument.ArgumentContent" class="form-control" />
                    <ValidationMessage For="() => Argument.ArgumentContent" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="argumentstance" class="form-label">ArgumentStance:</label>
                    <InputCheckbox id="argumentstance" @bind-Value="Argument.ArgumentStance" class="form-check-input" />
                    <ValidationMessage For="() => Argument.ArgumentStance" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="argumentlike" class="form-label">ArgumentLike:</label>
                    <InputNumber id="argumentlike" @bind-Value="Argument.ArgumentLike" class="form-control" />
                    <ValidationMessage For="() => Argument.ArgumentLike" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="userid" class="form-label">UserId:</label>
                    <InputNumber id="userid" @bind-Value="Argument.UserId" class="form-control" />
                    <ValidationMessage For="() => Argument.UserId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="topicid" class="form-label">TopicId:</label>
                    <InputNumber id="topicid" @bind-Value="Argument.TopicId" class="form-control" />
                    <ValidationMessage For="() => Argument.TopicId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Argument.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Argument.DateCreated" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/arguments">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Argument? Argument { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Argument ??= await context.Argument.FirstOrDefaultAsync(m => m.Id == Id);

        if (Argument is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateArgument()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Argument!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ArgumentExists(Argument!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/arguments");
    }

    private bool ArgumentExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Argument.Any(e => e.Id == id);
    }
}
